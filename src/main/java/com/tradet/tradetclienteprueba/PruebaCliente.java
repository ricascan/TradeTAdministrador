/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tradet.tradetclienteprueba;

import com.tradet.excepciones.ExcepcionTradeT;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author ricar
 */
public class PruebaCliente extends javax.swing.JFrame {

    /**
     * Creates new form PruebaCliente
     */
    ArrayList<Categoria> listaCategorias = new ArrayList();
    ArrayList<Usuario> listaUsuarios = new ArrayList();

    public PruebaCliente() {
        initComponents();
        leerUsuarios();
    }

    private void leerCategorias() {
        HashMap peticion = new HashMap();
        peticion.put("peticion", "leer categorias");
        try {
            Socket socket = new Socket("192.168.1.59", 5557);
            ObjectOutputStream flujoSalida = new ObjectOutputStream(socket.getOutputStream());

            flujoSalida.writeObject(peticion);
            flujoSalida.flush();
            ObjectInputStream flujoEntrada = new ObjectInputStream(socket.getInputStream());
            Object respuesta = null;

            respuesta = flujoEntrada.readObject();

            if (respuesta instanceof ArrayList) {
                ArrayList<HashMap> lista = (ArrayList<HashMap>) respuesta;
                for (HashMap map : lista) {
                    listaCategorias.add(new Categoria((Integer) map.get("id"), (String) map.get("nombre")));
                    comboBoxCategorias.addItem((String) map.get("nombre"));
                    
                }
            }

            flujoEntrada.close();
            flujoSalida.close();
            socket.close();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void leerUsuarios() {
        HashMap peticion = new HashMap();
        peticion.put("peticion", "leer usuarios");
        try {
            Socket socket = new Socket("192.168.1.59", 5557);
            ObjectOutputStream flujoSalida = new ObjectOutputStream(socket.getOutputStream());

            flujoSalida.writeObject(peticion);
            flujoSalida.flush();
            ObjectInputStream flujoEntrada = new ObjectInputStream(socket.getInputStream());
            Object respuesta = null;

            respuesta = flujoEntrada.readObject();

            if (respuesta instanceof ArrayList) {
                ArrayList<HashMap> lista = (ArrayList<HashMap>) respuesta;
                for (HashMap map : lista) {
                    listaUsuarios.add(new Usuario((Integer) map.get("id"), (String) map.get("nombre"), (String) map.get("contrasena"), (String) map.get("email"), (String) map.get("telefono"), (byte[]) map.get("foto")));
                    comboBoxCategorias.addItem((String) map.get("nombre"));
                    comboBoxCategorias1.addItem((String) map.get("nombre"));
                }
            }

            flujoEntrada.close();
            flujoSalida.close();
            socket.close();
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboBoxCategorias = new javax.swing.JComboBox<>();
        comboBoxCategorias1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSlider1 = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        comboBoxCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCategoriasActionPerformed(evt);
            }
        });

        comboBoxCategorias1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCategorias1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSlider1.setMaximum(5);
        jSlider1.setSnapToTicks(true);

        jButton1.setText("Insertar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboBoxCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboBoxCategorias1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(0, 180, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxCategorias1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jButton1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCategoriasActionPerformed
//        int index = comboBoxCategorias.getSelectedIndex();
//        HashMap peticion = new HashMap();
//        peticion.put("peticion", "leer productos filtro");
//        peticion.put("argumento", "where categoria.categoriaId = "+listaCategorias.get(index).getCategoriaId());
//        try {
//            Socket socket = new Socket("192.168.1.59", 5557);
//            ObjectOutputStream flujoSalida = new ObjectOutputStream(socket.getOutputStream());
//            
//            
//            flujoSalida.writeObject(peticion);
//            flujoSalida.flush();
//            ObjectInputStream flujoEntrada = new ObjectInputStream(socket.getInputStream());
//            Object respuesta = null;
//            
// 
//            respuesta = flujoEntrada.readObject();
//
//
//            if (respuesta instanceof ArrayList){
//                ArrayList<HashMap> lista= (ArrayList<HashMap>) respuesta;
//                DefaultListModel listModel = new DefaultListModel();
//                for(HashMap map:lista){
//                    listModel.addElement(map.get("nombre"));
//                }
//                jListProductos.setModel(listModel);
//            }
//                
//            flujoEntrada.close();
//            flujoSalida.close();
//            socket.close();
//        } catch (IOException | ClassNotFoundException ex) {
//            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        int index = comboBoxCategorias.getSelectedIndex();
//        HashMap peticion = new HashMap();
//        peticion.put("peticion", "leer valoraciones filtro");
//        peticion.put("argumento", "where usuarioByUsuarioValoradoId.usuarioId = "+listaUsuarios.get(index).getUsuarioId());
//        try {
//            Socket socket = new Socket("192.168.1.59", 5557);
//            ObjectOutputStream flujoSalida = new ObjectOutputStream(socket.getOutputStream());
//            
//            
//            flujoSalida.writeObject(peticion);
//            flujoSalida.flush();
//            ObjectInputStream flujoEntrada = new ObjectInputStream(socket.getInputStream());
//            Object respuesta = null;
//            
// 
//            respuesta = flujoEntrada.readObject();
//
//
//            if (respuesta instanceof ArrayList){
//                ArrayList<HashMap> lista= (ArrayList<HashMap>) respuesta;
//                DefaultListModel listModel = new DefaultListModel();
//                for(HashMap map:lista){
//                    listModel.addElement(map.get("usuario valorador"));
//                }
//                jListProductos.setModel(listModel);
//            }
//                
//            flujoEntrada.close();
//            flujoSalida.close();
//            socket.close();
//        } catch (IOException | ClassNotFoundException ex) {
//            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
//        }


    }//GEN-LAST:event_comboBoxCategoriasActionPerformed

    private void comboBoxCategorias1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxCategorias1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxCategorias1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            Valoracion valoracion = new Valoracion(new Usuario(listaUsuarios.get(comboBoxCategorias.getSelectedIndex()).getUsuarioId()), new Usuario(listaUsuarios.get(comboBoxCategorias1.getSelectedIndex()).getUsuarioId()), (Integer) jSlider1.getValue(), jTextArea1.getText());
            HashMap peticion = new HashMap();
            peticion.put("peticion", "insertar valoracion");
            peticion.put("argumento", valoracion.toHash());
            
            Socket socket = new Socket("192.168.1.59", 5557);
            ObjectOutputStream flujoSalida = new ObjectOutputStream(socket.getOutputStream());
            
            flujoSalida.writeObject(peticion);
            flujoSalida.flush();
            ObjectInputStream flujoEntrada = new ObjectInputStream(socket.getInputStream());
            Object respuesta = null;
            
            respuesta = flujoEntrada.readObject();
            
            if(respuesta instanceof String){
                System.out.println(respuesta);
            }else if(respuesta instanceof ExcepcionTradeT){
                System.out.println(respuesta);
            }
            
            flujoEntrada.close();
            flujoSalida.close();
            socket.close();
        } catch (IOException ex) {
            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PruebaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PruebaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PruebaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PruebaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PruebaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PruebaCliente().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBoxCategorias;
    private javax.swing.JComboBox<String> comboBoxCategorias1;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
